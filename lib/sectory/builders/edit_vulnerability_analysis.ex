defmodule Sectory.Builders.EditVulnerabilityAnalysis do
  use Ecto.Schema
  import Ecto.Changeset

  @moduledoc """
  Validate, and update existing analysis data presented by a user.
  """

  schema "sectory_builders.edit_vulnerability_analysis" do
    field :state, :string
    field :justification, :string
    field :response, :string
    field :adjusted_severity, :string
    field :detail, :string
  end

  def changeset(vulnerability_analysis, params \\ %{}) do
    vulnerability_analysis
      |> cast(params, [
        :state,
        :justification,
        :response,
        :adjusted_severity,
        :detail
        ])
      |> validate_required([
          :detail,
          :state,
          :adjusted_severity
        ])
      |> validate_length(:state, min: 1, max: 128)
      |> validate_length(:justification, max: 128)
      |> validate_length(:response, max: 128)
      |> validate_length(:adjusted_severity, max: 128)
      |> validate_length(:detail, min: 5)
  end

  def edit(params) do
    record = Sectory.Repo.get!(Sectory.Records.VulnerabilityAnalysis, params["id"])
    %{
      id: record.id,
      state: record.state,
      justification: record.justification,
      response: record.response,
      adjusted_severity: record.adjusted_severity,
      detail: record.detail
    }
  end

  def update(params) do
    record = Sectory.Repo.get!(Sectory.Records.VulnerabilityAnalysis, params["id"])
    changeset(record, params)
  end

  def save(changeset) do
    data = Ecto.Changeset.apply_changes(changeset)
    record = Sectory.Repo.get!(Sectory.Records.VulnerabilityAnalysis, data.id)
    va_cs = Sectory.Records.VulnerabilityAnalysis.changeset(
      record,
      %{
        state: data.state,
        detail: data.detail,
        response: data.response,
        adjusted_severity: data.adjusted_severity,
        justification: data.justification
      }
    )
    {:ok, _va_record} = Sectory.Repo.update(va_cs)
  end
end
