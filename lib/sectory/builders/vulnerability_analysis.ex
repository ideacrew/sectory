defmodule Sectory.Builders.VulnerabilityAnalysis do
  use Ecto.Schema
  import Ecto.Changeset

  schema "sectory_builders.deliverable_versions" do
    field :state, :string
    field :vulnerability_identifier, :string
    field :justification, :string
    field :response, :string
    field :adjusted_severity, :string
    field :detail, :string
    field :deliverable_version_id, :id
    field :deliverable_id, :id
  end

  def new(params \\ %{}) do
    changeset(%__MODULE__{}, params)
  end

  def changeset(vulnerability_analysis, params \\ %{}) do
    vulnerability_analysis
      |> cast(params, [
        :vulnerability_identifier,
        :state,
        :justification,
        :response,
        :adjusted_severity,
        :detail,
        :deliverable_id,
        :deliverable_version_id,
        ])
      |> validate_required([
          :vulnerability_identifier,
          :detail,
          :state,
          :adjusted_severity
        ])
      |> validate_length(:vulnerability_identifier, min: 1, max: 256)
      |> validate_length(:state, min: 1, max: 128)
      |> validate_length(:justification, max: 128)
      |> validate_length(:response, max: 128)
      |> validate_length(:adjusted_severity, max: 128)
      |> validate_length(:detail, min: 5)
  end

  def save(changeset) do
    data = Ecto.Changeset.apply_changes(changeset)
    va_cs = Sectory.Records.VulnerabilityAnalysis.new(%{
      state: data.state,
      detail: data.detail,
      response: data.response,
      adjusted_severity: data.adjusted_severity,
      justification: data.justification
    })
    {:ok, va_record} = Sectory.Repo.insert(va_cs)
    vas_cs = Sectory.Records.VulnerabilityAnalysisScope.new(%{
      vulnerability_analysis_id: va_record.id,
      deliverable_id: data.deliverable_id,
      deliverable_version_id: data.deliverable_version_id,
      vulnerability_identifier: data.vulnerability_identifier
    })
    Sectory.Repo.insert(vas_cs)
  end
end
