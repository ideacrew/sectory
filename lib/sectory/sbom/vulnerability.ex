defmodule Sectory.Sbom.Vulnerability do
  @moduledoc """
  Extract data from an SBOM Vulnerability structure.
  """

  require Lens.Macros

  @severity_rank %{
    "none" => 0,
    "unknown" => 1,
    "info" => 1,
    "low" => 3,
    "medium" => 4,
    "high" => 5,
    "critical" => 6
  }

  def format_severity(v) do
    adjusted_severity =
      Lens.to_list(adjusted_severity_lens(), v)
      |> Enum.at(0, "unknown")

    case adjusted_severity do
      "unknown" -> max_severity_from_ratings(v)
      _ -> adjusted_severity
    end
  end

  defp max_severity_from_ratings(v) do
    rating_severities =
      rating_severity_lens()
      |> Lens.to_list(v)

    case rating_severities do
      [] -> "unknown"
      _ -> Enum.max_by(
        rating_severities,
        fn(v) ->
          @severity_rank[v]
        end
      )
    end
  end

  def potential?(v) do
    case {has_non_triage_state(v), potential_value(v)} do
      {true, _} -> false
      {false, "potential"} -> true
      _ -> false
    end
  end

  defp has_non_triage_state(v) do
    case Map.has_key?(v, "analysis") do
      false -> false
      _ -> analysis_state_value(v["analysis"])
    end
  end

  defp analysis_state_value(nil), do: nil

  defp analysis_state_value(analysis) do
    case analysis["state"] do
      "in_triage" -> false
      _ -> true
    end
  end

  defp potential_value(v) do
    case Map.has_key?(v, "properties") do
      false -> nil
      _ -> potential_property_value(v["properties"])
    end
  end

  defp potential_property_value(nil), do: nil
  defp potential_property_value([]), do: nil

  defp potential_property_value(props) do
    Enum.find(props, %{"value" => nil}, fn prop ->
      prop["name"] == "vuln-assign:certainty"
    end)["value"]
  end

  Lens.Macros.deflensp adjusted_severity_lens() do
    Lens.key?("properties")
    |> Lens.all()
    |> Lens.filter(fn v when is_map(v) ->
      v["name"] == "vuln-assign:analysis_severity"
    end)
    |> Lens.key?("value")
  end

  Lens.Macros.deflensp rating_severity_lens() do
    Lens.key?("ratings")
    |> Lens.all()
    |> Lens.filter(fn v when is_map(v) ->
      Map.has_key?(v, "severity")
    end)
    |> Lens.key?("severity")
  end
end
