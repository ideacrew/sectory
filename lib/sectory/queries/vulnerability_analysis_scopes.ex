defmodule Sectory.Queries.VulnerabilityAnalysisScopes do
  import Ecto.Query

  @moduledoc """
  Shared queries for Vulnerability Analysis Scopes.
  """

  def all() do
    query = (
      from vas in Sectory.Records.VulnerabilityAnalysisScope,
      join: va in assoc(vas, :vulnerability_analysis),
      left_join: d in assoc(vas, :deliverable),
      left_join: dv in assoc(vas, :deliverable_version),
      left_join: d2 in assoc(dv, :deliverable),
      order_by: [vas.vulnerability_identifier, vas.deliverable_id, vas.deliverable_version_id],
      preload: [
        deliverable: d,
        deliverable_version: {dv, [deliverable: d2]},
        vulnerability_analysis: va
      ]
    )
    Sectory.Repo.all(query)
  end

  def scopes_for_sbom_version(sbom_version) do
    version_id = sbom_version.deliverable_version_id
    deliverable_id = sbom_version.deliverable_version.deliverable_id

    from vas in Sectory.Records.VulnerabilityAnalysisScope,
    join: va in assoc(vas, :vulnerability_analysis),
    preload: :vulnerability_analysis,
    where:
      vas.deliverable_version_id == ^version_id or
        (vas.deliverable_id == ^deliverable_id and is_nil(vas.deliverable_version_id)) or
        (is_nil(vas.deliverable_id) and is_nil(vas.deliverable_version_id) and
           vas.vulnerability_identifier in fragment("select distinct(cast(jsonb_array_elements(data->'vulnerabilities')->'id' as varchar(128))) from sbom_contents where version_sbom_id = ?", ^sbom_version.id))
  end
end
