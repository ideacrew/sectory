defmodule SectoryEtl.Import.VulnerabilityAnalysis do
  import Ecto.Query

  @moduledoc """
  Import VulnerabilityAnalysis records.

  Currently only supports from a previously-exported CSV.
  """

  def create_vulnerability_analyses_from_file(csv_path) do
    stream = File.stream!(csv_path)
    csv = CSV.decode(stream, headers: true)

    Enum.map(csv, fn rec ->
      build_record_from_csv_row(rec)
    end)
  end

  def create_vulnerability_analyses_from_string(csv_string) do
    csv = CSV.decode(csv_string, headers: true)
    Enum.map(csv, fn rec ->
      build_record_from_csv_row(rec)
    end)
  end

  def build_record_from_csv_row({:ok, values}) do
    with {:ok, deliverable_id} <- locate_deliverable_id(values),
         {:ok, deliverable_version_id} <- locate_deliverable_version_id(values) do
      cs =
        Sectory.Builders.VulnerabilityAnalysis.new(%{
          vulnerability_identifier: values["vulnerability_identifier"],
          state: values["state"],
          response: values["response"],
          justification: values["justification"],
          detail: values["detail"],
          adjusted_severity: values["adjusted_severity"],
          deliverable_id: deliverable_id,
          deliverable_version_id: deliverable_version_id
        })

      case cs.valid? do
        false -> :error
        _ -> Sectory.Builders.VulnerabilityAnalysis.save(cs)
      end
    end
  end

  def build_record_from_csv_row(_) do
    :ok
  end

  defp locate_deliverable_id(values) do
    deliverable_name = values["deliverable_name"]

    case deliverable_name do
      nil -> {:ok, nil}
      "" -> {:ok, nil}
      a -> find_deliverable_id_from_name(a)
    end
  end

  defp locate_deliverable_version_id(values) do
    deliverable_version_version = values["deliverable_version_version"]
    deliverable_version_sha = values["deliverable_version_sha"]
    deliverable_name = values["deliverable_version_deliverable_name"]

    search_params =
      {cast_val(deliverable_name), cast_val(deliverable_version_sha),
       cast_val(deliverable_version_version)}

    case search_params do
      {nil, nil, nil} -> {:ok, nil}
      {nil, _, _} -> :error
      {_, nil, nil} -> :error
      {_, nil, _} -> find_deliverable_version_id_using(search_params)
      {_, _, nil} -> find_deliverable_version_id_using(search_params)
      _ -> find_deliverable_version_id_using(search_params)
    end
  end

  defp find_deliverable_version_id_using({
         d_name,
         nil,
         d_version
       }) do
    with {:ok, deliverable_id} <- find_deliverable_id_from_name(d_name) do
      query = (
        from dv in Sectory.Records.DeliverableVersion,
        where: dv.deliverable_id == ^deliverable_id and
               dv.version == ^d_version and
               is_nil(dv.git_sha)
      )
      record = Sectory.Repo.one(query)
      case record do
        nil -> :error
        _ -> {:ok, record.id}
      end
    end
  end

  defp find_deliverable_version_id_using({
         d_name,
         d_sha,
         nil
       }) do
    with {:ok, deliverable_id} <- find_deliverable_id_from_name(d_name) do
      query = (
        from dv in Sectory.Records.DeliverableVersion,
        where: dv.deliverable_id == ^deliverable_id and
               dv.git_sha == ^d_sha and
               is_nil(dv.version)
      )
      record = Sectory.Repo.one(query)
      case record do
        nil -> :error
        _ -> {:ok, record.id}
      end
    end
  end

  defp find_deliverable_version_id_using({
         d_name,
         d_sha,
         d_version
       }) do
    with {:ok, deliverable_id} <- find_deliverable_id_from_name(d_name) do
      query = (
        from dv in Sectory.Records.DeliverableVersion,
        where: dv.deliverable_id == ^deliverable_id and
               dv.git_sha == ^d_sha and
               dv.version == ^d_version
      )
      record = Sectory.Repo.one(query)
      case record do
        nil -> :error
        _ -> {:ok, record.id}
      end
    end
  end

  def find_deliverable_id_from_name(deliverable_name) do
    rec =
      Sectory.Repo.one(
        from d in Sectory.Records.Deliverable,
          where: d.name == ^deliverable_name
      )

    case rec do
      nil -> :error
      _ -> {:ok, rec.id}
    end
  end

  defp cast_val(nil), do: nil
  defp cast_val(""), do: nil
  defp cast_val([]), do: nil
  defp cast_val(a), do: a
end
