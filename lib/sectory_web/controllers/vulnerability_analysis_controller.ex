defmodule SectoryWeb.VulnerabilityAnalysisController do
  use SectoryWeb, :controller
  import Ecto.Query

  def new(conn, %{"suggested_deliverable_version_id" => dv_id, "vulnerability_identifier" => vi}) do
    deliverable_version = Sectory.Repo.one!(
      from dv in Sectory.Records.DeliverableVersion,
      join: d in assoc(dv, :deliverable),
      where: dv.id == ^dv_id,
      preload: [:deliverable]
    )
    conn
    |> render_inertia(
      "VulnerabilityAnalyses/NewComponent",
      %{
        vulnerability_analysis: %{
          vulnerability_identifier: vi
        },
        create_url: ~p"/vulnerability_analyses",
        suggested_deliverable_version_id: dv_id,
        deliverable_id: deliverable_version.deliverable.id,
        deliverable_name: deliverable_version.deliverable.name,
        suggested_deliverable_version_name: deliverable_version_for_display(deliverable_version)
      }
    )
  end

  def create(conn, params) do
    cs = Sectory.Builders.VulnerabilityAnalysis.new(params)
    case cs.valid? do
      false ->
        conn
          |> assign_errors(cs)
          |> redirect(to: ~p"/vulnerability_analyses/new?suggested_deliverable_version_id=#{params["suggested_deliverable_version_id"]}&vulnerability_identifier=#{params["vulnerability_identifier"]}")
      _ ->
        Sectory.Builders.VulnerabilityAnalysis.save(cs)
        conn
          |> redirect(to: ~p"/deliverable_versions/#{params["suggested_deliverable_version_id"]}")
    end
  end

  def deliverable_version_for_display(deliverable_version) do
    case deliverable_version.version do
      nil -> deliverable_version.git_sha
      _ -> deliverable_version.version
    end
  end
end
