defmodule SectoryWeb.VulnerabilityAnalysisController do
  use SectoryWeb, :controller
  import Ecto.Query

  def index(conn, _params) do
    vas = vulnerability_analysis_scope_list()
    conn
    |> render_inertia(
      "VulnerabilityAnalyses/IndexComponent",
      %{
        vulnerability_analysis_scopes: vulnerability_analysis_scopes_serialized(vas)
      }
    )
  end

  def new(conn, %{"suggested_deliverable_version_id" => dv_id, "vulnerability_identifier" => vi}) do
    deliverable_version = Sectory.Repo.one!(
      from dv in Sectory.Records.DeliverableVersion,
      join: d in assoc(dv, :deliverable),
      where: dv.id == ^dv_id,
      preload: [:deliverable]
    )
    conn
    |> render_inertia(
      "VulnerabilityAnalyses/NewComponent",
      %{
        vulnerability_analysis: %{
          vulnerability_identifier: vi
        },
        create_url: ~p"/vulnerability_analyses",
        suggested_deliverable_version_id: dv_id,
        deliverable_id: deliverable_version.deliverable.id,
        deliverable_name: deliverable_version.deliverable.name,
        suggested_deliverable_version_name: deliverable_version_for_display(deliverable_version)
      }
    )
  end

  def create(conn, params) do
    cs = Sectory.Builders.VulnerabilityAnalysis.new(params)
    case cs.valid? do
      false ->
        conn
          |> assign_errors(cs)
          |> redirect(to: ~p"/vulnerability_analyses/new?suggested_deliverable_version_id=#{params["suggested_deliverable_version_id"]}&vulnerability_identifier=#{params["vulnerability_identifier"]}")
      _ ->
        Sectory.Builders.VulnerabilityAnalysis.save(cs)
        conn
          |> redirect(to: ~p"/deliverable_versions/#{params["suggested_deliverable_version_id"]}")
    end
  end

  def deliverable_version_for_display(deliverable_version) do
    case deliverable_version.version do
      nil -> deliverable_version.git_sha
      _ -> deliverable_version.version
    end
  end

  def vulnerability_analysis_scopes_serialized(records) do
    Enum.map(records, fn(r) ->
      base_scope = %{
        id: r.id,
        vulnerability_identifier: r.vulnerability_identifier,
        state: r.vulnerability_analysis.state,
        response: r.vulnerability_analysis.response,
        justification: r.vulnerability_analysis.justification,
        adjusted_severity: r.vulnerability_analysis.adjusted_severity,
        detail: r.vulnerability_analysis.detail
      }
      with_deliverable = case r.deliverable do
        nil -> base_scope
        _ -> Map.put(base_scope, :deliverable, r.deliverable.name)
      end
      with_deliverable_version = case r.deliverable_version do
        nil -> with_deliverable
        _ -> Map.put(base_scope, :deliverable_version, r.deliverable_version.deliverable.name <> ": " <> deliverable_version_for_display(r.deliverable_version))
      end
      with_deliverable_version
    end)
  end

  defp vulnerability_analysis_scope_list() do
    query = (
      from vas in Sectory.Records.VulnerabilityAnalysisScope,
      join: va in assoc(vas, :vulnerability_analysis),
      left_join: d in assoc(vas, :deliverable),
      left_join: dv in assoc(vas, :deliverable_version),
      left_join: d2 in assoc(dv, :deliverable),
      order_by: [vas.vulnerability_identifier, vas.deliverable_id, vas.deliverable_id],
      preload: [
        deliverable: d,
        deliverable_version: {dv, [deliverable: d2]},
        vulnerability_analysis: va
      ]
    )
    Sectory.Repo.all(query)
  end
end
