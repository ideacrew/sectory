import { Head, usePage, router } from '@inertiajs/react'
import { useState } from 'react'
import { VulnerablityAnalysisJustificationList, VulnerablityAnalysisResponseList, VulnerablityAnalysisStateList } from '../../cyclonedx/models'
import React from 'react'
import "./NewComponent.css";


export default function NewComponent({ vulnerability_analysis, create_url, suggested_deliverable_version_id, deliverable_id, deliverable_name, suggested_deliverable_version_name }) {
  const { errors } = usePage().props

  const [values, setValues] = useState({
    suggested_deliverable_version_id: suggested_deliverable_version_id,
    vulnerability_identifier: vulnerability_analysis.vulnerability_identifier,
    state: VulnerablityAnalysisStateList[0],
    justification: vulnerability_analysis.justification,
    response: vulnerability_analysis.response,
    detail: vulnerability_analysis.detail,
    deliverable_id: vulnerability_analysis.deliverable_id,
    deliverable_version_id: suggested_deliverable_version_id
  });

  const originalVulnerabilityAnalysisDeliverableIdValue = deliverable_id;
  const originalVulnerabilityAnalysisDeliverableVersionIdValue = suggested_deliverable_version_id;

  function handleChange(e) {
    setValues(values => ({
      ...values,
      [e.target.id]: e.target.value,
    }))
  }

  function optionsForState() {
    return VulnerablityAnalysisStateList.map(vas => <option key={vas} value={vas}>{vas}</option>);
  }

  function optionsForJustification() {
    return (
      [<option key="nada" value={undefined}>None</option>].concat(VulnerablityAnalysisJustificationList.map(vas => <option key={vas} value={vas}>{vas}</option>))
    );
  }

  function optionsForResponse() {
    return (
      [<option key="nada" value={undefined}>None</option>].concat(VulnerablityAnalysisResponseList.map(vas => <option key={vas} value={vas}>{vas}</option>))
    );
  }

  function deliverableCheckboxChecked(e) {
    let checked = e.target.checked;
    let newVal = checked ? originalVulnerabilityAnalysisDeliverableIdValue : undefined;
    setValues(values => ({
      ...values,
      deliverable_id: newVal
    }));
  }

  function deliverableVersionCheckboxChecked(e) {
    let checked = e.target.checked;
    console.log(checked);
    let newVal = checked ? originalVulnerabilityAnalysisDeliverableVersionIdValue : undefined;
    setValues(values => ({
      ...values,
      deliverable_version_id: newVal
    }));
  }

  function handleSubmit(e) {
    e.preventDefault()
    router.post(create_url, values)
  }

  return (
    <>
      <Head title="New Vulnerability Analysis" />
      <h2>{vulnerability_analysis.vulnerability_identifier}</h2>
      <form onSubmit={handleSubmit} className="vulnerability-analysis-form-new">
        <fieldset className="new-vulnerability-analysis-scope-checks">
          <legend>Additional Scope Limitations</legend>
          <label htmlFor='fake_ignored_deliverable_id'>
            <input type="checkbox" id="fake_ignored_deliverable_id" name="fake_ignored_deliverable_id" defaultChecked={false} onChange={deliverableCheckboxChecked} />Deliverable: {deliverable_name}
          </label>
          <label htmlFor='fake_ignored_deliverable_version_id'>
            <input type="checkbox" id="fake_ignored_deliverable_version_id" name="fake_ignored_deliverable_version_id" defaultChecked={true} onChange={deliverableVersionCheckboxChecked} />Deliverable Version: {suggested_deliverable_version_name}
          </label>
        </fieldset>
        <div className='form-horizontal'>
          <label htmlFor="state">
            State
          </label>
          <select id="state" name="state" onChange={handleChange} value={values.state}>
            {optionsForState()}
          </select>
          {errors.state && <div className="errors">{errors.state}</div>}
          <label htmlFor="justification">
            Justification
          </label>
          <select id="justification" name="justification" onChange={handleChange} value={values.justification}>
            {optionsForJustification()}
          </select>
          {errors.justification && <div className="errors">{errors.justification}</div>}
          <label htmlFor="response">
            Response
          </label>
          <select id="response" name="response" onChange={handleChange} value={values.response}>
            {optionsForResponse()}
          </select>
          {errors.response && <div className="errors">{errors.response}</div>}
          <label htmlFor="detail">
            Details
          </label>
          <textarea id="detail" name="detail" onChange={handleChange} value={values.detail}></textarea>
          {errors.detail && <div className="errors">{errors.detail}</div>}
          <input type='submit' value="Submit" className="btn btn-primary" />
        </div>
      </form>
    </>
  )
}