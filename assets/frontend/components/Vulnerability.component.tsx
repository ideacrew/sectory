import { Component, Fragment } from "react";
import * as CycloneModel from "../cyclonedx/models";
import { VulnerabilityReferenceListComponent } from "./VulnerabilityReferenceList.component";
import { VulnerabilityAffectedComponent } from "./VulnerabilityAffected.component";
import { CycloneDataLoader } from "./cyclone_data_loader";
import { VulnerabilityRatingsListComponent } from "./VulnerabilityRatingsList.component";
import { VulnerabilityAdvisoryComponent } from "./VulnerabilityAdvisory.component";
import ellipsize from "ellipsize";
import React from 'react';

type PropsType  = {
  vulnerability: CycloneModel.Vulnerability,
  dataLoader: CycloneDataLoader,
  deliverableVersion: any;
}

type StateType = {
  shown: boolean;
}

export class VulnerabilityComponent extends Component<PropsType, StateType, any> {
  constructor(props: PropsType) {
    super(props);
    this.state = {
      shown: false
    };
  }

  toggleShow = () => {
    this.setState((s) => {
      return {...s, shown: !s.shown}
    });
  };

  formatScore() {
    if (this.props.vulnerability.ratings) {
      const ratings = this.props.vulnerability.ratings;
      if (ratings.length > 0) {
      const ratings = this.props.vulnerability.ratings!;
        let sortedScores = ratings.sort((a, b) => {
          const score_a = a.score ? a.score : 0.0;
          const score_b = b.score ? b.score : 0.0;
          return score_b - score_a;
        });
        return sortedScores[0].score ? sortedScores[0].score : 0.0;
      }
    }
    return "Unknown";
  }

  getClassName() : string {
    if (this.state.shown) {
      return "vuln-detail-shown";
    }
    return "vuln-detail-hidden";
  }

  formatTools() {
    if (this.props.vulnerability.tools) {
      const tools = this.props.vulnerability.tools;
      if (tools.components) {
        const comps = tools.components;
        if (comps.length > 0) {
          return comps.map(c => c.name).join(", ");
        }
      }
    }
    return "";
  }

  renderDetail() {
    if (this.props.vulnerability.detail) {
      return <div>
        <h3>Details</h3>
        <pre className="vuln-row-details-detail">{this.props.vulnerability.detail}</pre>
      </div>
    }
    return "";
  }

  renderAnalyze() {
    if (this.props.vulnerability.analysis) {
      return "";
    }
    return <div>
      <a href={this.props.deliverableVersion.analysis_url + "&vulnerability_identifier=" + encodeURIComponent(this.props.vulnerability.id)}>Analyze this vulnerability</a>
    </div>
  }

  renderAnalysis() {
    if (!this.props.vulnerability.analysis) {
      return "";
    }
    const analysis = this.props.vulnerability.analysis;
    return <div>
      <h3>Analysis</h3>
      <dl>
        <dt>State</dt>
        <dd>{analysis.state}</dd>
        <dt>Justification</dt>
        <dd>{analysis.justification}</dd>
        <dt>Response</dt>
        <dd>{analysis.response}</dd>
        <dt>First Issued</dt>
        <dd>{analysis.firstIssued}</dd>
        <dt>Last Updated</dt>
        <dd>{analysis.lastUpdated}</dd>
      </dl>
      <pre>{analysis.detail}</pre>
    </div>;
  }

  showDescription() {
    if (this.props.vulnerability.description) {
      return this.props.vulnerability.description;
    }
    if (this.props.vulnerability.detail) {
      return ellipsize(this.props.vulnerability.detail, 80);
    }
    return "NO DESCRIPTION PROVIDED";
  }

  public renderPossible() {
    if (CycloneModel.isPossibleAssignment(this.props.vulnerability)) {
      return <strong>(P) </strong>
    }
    return "";
  }

  render() {
    return (
    <Fragment>
    <tr key={"vuln-row-info" + this.props.vulnerability["bom-ref"]} className="vuln-main-row">
      <td>{this.renderPossible()}{this.props.vulnerability.id}</td>
      <td>{this.showDescription()}</td>
      <td>{CycloneModel.formatSeverity(this.props.vulnerability)}</td>
      <td>{this.formatScore()}</td>
      <td>{this.formatTools()}</td>
      <td className="table-detail-toggle" onClick={this.toggleShow}>Details</td>
    </tr>
    <tr key={"vuln-row-details" + this.props.vulnerability["bom-ref"]} className={this.getClassName()}>
      <td colSpan={5} className="vuln-row-details-content">
        <VulnerabilityRatingsListComponent vulnerability={this.props.vulnerability}/>
        <VulnerabilityAdvisoryComponent vulnerability={this.props.vulnerability}/>
        <VulnerabilityAffectedComponent vulnerability={this.props.vulnerability} dataLoader={this.props.dataLoader}/>
        <VulnerabilityReferenceListComponent vulnerability={this.props.vulnerability} />
        {this.renderDetail()}
        {this.renderAnalysis()}
        {this.renderAnalyze()}
      </td>
    </tr>
  </Fragment>);
  }
}